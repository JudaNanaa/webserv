---------------------[NEW SERVER ADDED]---------------------
listen:  8080
server_names:  42.fr www.42.fr
root:  URIs
index:  index.html
uploads_folder:  /var/web/ups
allowed_methods:   GET DELETE POST OPTIONS
error_pages:  404 error 401 401.html 500 501.htm /var/web/error_pages
auto_index:  on
cgi:  .py /bin/python3
cgi:  .sh /bin/bash
cgi:  .php /bin/php8.1
client_max_body_size:  10
location /cgi-bin
{
	root: /var/web/
	index: index.html
	autoIndex: true
	cgi: .py /bin/python3
	redirect: default
	allowed Methods: GET POST 
	max body size: default
	file upload: false
	upload folder: default
}

location /uploads
{
	root: /var/web/site_0
	index: inde.html
	autoIndex: false
	cgi: default
	redirect: default
	allowed Methods: GET POST DELETE OPTIONS 
	max body size: default
	file upload: true
	upload folder: /var/web/ups
}

location /dieri
{
	root: default
	index: dieriba.html
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=7ij8Qj4JLjI
	allowed Methods: GET POST 
	max body size: 1024
	file upload: false
	upload folder: default
}

location /rayan
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=5Fj-VIslrFc
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /soundous
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=rzeZcdW4Pbo
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /mouslim
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/shorts/SqXXwcs8iyQ
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /rico
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=akU7HXvYft8
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /olivia
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=cordADXcng0
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /anastasia
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=7ij8Qj4JLjI
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /moussa
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/shorts/hfaGQeX-bE4
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /mohamed
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=0cJjmXEhG-Y
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /dasha
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=LjxulQ1bEWg
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /alix
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=MaFEHf34fCQ
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /ana
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/shorts/Nx9epM1I_Q8
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /lomaubob
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=2XOz8ZhOoWo
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

location /naomie
{
	root: default
	index: default
	autoIndex: false
	cgi: default
	redirect: https://www.youtube.com/watch?v=2EwViQxSJJQ
	allowed Methods: none
	max body size: default
	file upload: false
	upload folder: default
}

---------------------[NEW SERVER ADDED]---------------------
listen:             8081
server_names:     localhost
root:             /var/web/site_1/
index:              index.html
auto_index:         on
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8082
server_names:     dieriba.fr
index:             index.html
root:             /var/web/site_2/
allowed_methods:     GET POST DELETE
auto_index:         on
---------------------[NEW SERVER ADDED]---------------------
listen:             8083
server_names:     localhost
index:             index.html
root:             /var/web/site_2/
allowed_methods:     POST DELETE
auto_index:         on
---------------------[NEW SERVER ADDED]---------------------
listen:             8084
server_names:     localhost
index:             index.html
root:             /var/web/site_3/
allowed_methods:     GET POST DELETE
auto_index:         on
---------------------[NEW SERVER ADDED]---------------------
listen:             8085
server_names:     localhost
auto_index:         on
index:             index.html
root:             /var/web/site_4/
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8086
server_names:     localhost
index:             index.html
auto_index:         on
root:             /var/web/site_5/
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8087
server_names:     localhost
index:             index.html
auto_index:         on
root:             /var/web/site_6/
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8088
server_names:     localhost
index:             index.html
auto_index:         on
root:             /var/web/site_7/
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8089
server_names:     localhost
index:             index.html
auto_index:         on
root:             /var/web/site_8/
allowed_methods:     GET POST DELETE
---------------------[NEW SERVER ADDED]---------------------
listen:             8090
server_names:     localhost
index:             index.html
auto_index:         on
root:             /var/web/site_9/
allowed_methods:     GET POST DELETE
PARSING OK!
server on : http://127.0.0.1:8080
server on : http://127.0.0.1:8081
server on : http://127.0.0.1:8082
server on : http://127.0.0.1:8083
server on : http://127.0.0.1:8084
server on : http://127.0.0.1:8085
server on : http://127.0.0.1:8086
server on : http://127.0.0.1:8087
server on : http://127.0.0.1:8088
server on : http://127.0.0.1:8089
server on : http://127.0.0.1:8090

--------------------ADDING CLIENT--------------------

DEBUG HEADER: 
GET / HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Upgrade-Insecure-Requests: 1
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: none
Sec-Fetch-User: ?1
-------------------------------------PATH : /
if root : URIs/index.html
DEBUG HEADER: 
POST /uploads/post.html HTTP/1.1
Host: localhost:8080
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Content-Type: multipart/form-data; boundary=---------------------------38506945516482850021969463818
Content-Length: 4621
Origin: http://localhost:8080
Connection: keep-alive
Referer: http://localhost:8080/
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin
-------------------------------------PATH : /uploads/post.html
-----------------------------38506945516482850021969463818
Content-Disposition: form-data; name="fileUpload[]"; filename="ok"
Content-Type: application/octet-stream

test
-----------------------------38506945516482850021969463818
Content-Disposition: form-data; name="fileUpload[]"; filename="microshell.c"
Content-Type: text/x-csrc

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   microshell.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: gicomlan <gicomlan@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/28 09:21:24 by gicomlan          #+#    #+#             */
/*   Updated: 2024/09/28 09:56:11 by gicomlan         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>     // write, chdir, dup2, close, execve
#include <sys/wait.h>   // waitpid
#include <stdlib.h>     // exit
#include <string.h>     // strcmp

// Function to print an error msg to stderr
void ft_print_error(char *msg)
{
	while (*msg)
		write(STDERR_FILENO, msg++, 1);
}

// Function to change directory
int ft_execute_cd(char **arg, int arg_count)
{
	if (arg_count != 2)
		return (ft_print_error("error: cd: bad arg\n"), 1);
	if (chdir(arg[1]) == -1)
		return (ft_print_error("error: cd: cannot change directory to "), \
			ft_print_error(arg[1]), ft_print_error("\n"), 1);
	return (0);
}

// Function to set up a pipe if needed
void ft_configure_pipe(int has_pipe, int *pipe_fds, int end)
{
	if (has_pipe && (dup2(pipe_fds[end], end) == -1 || \
		close(pipe_fds[0]) == -1 || close(pipe_fds[1]) == -1))
		ft_print_error("error: fatal\n"), exit(EXIT_FAILURE);
}

// Function to execute commands and handle pipes
int ft_execute_command(char **arg, int arg_count, char **env)
{
	int has_pipe, pipe_fds[2], pid, code;

	has_pipe = arg[arg_count] && !strcmp(arg[arg_count], "|");
	if (!has_pipe && !strcmp(*arg, "cd"))
		return (ft_execute_cd(arg, arg_count));
	if (has_pipe && pipe(pipe_fds) == -1)
		ft_print_error("error: fatal\n"), exit(EXIT_FAILURE);
	if ((pid = fork()) == -1)
		ft_print_error("error: fatal\n"), exit(EXIT_FAILURE);
	if (pid == 0)
	{
		arg[arg_count] = NULL;
		ft_configure_pipe(has_pipe, pipe_fds, STDOUT_FILENO);
		if (!strcmp(*arg, "cd"))
			exit(ft_execute_cd(arg, arg_count));
		execve(arg[0], arg, env);
		ft_print_error("error: cannot execute "), ft_print_error(arg[0]), \
		ft_print_error("\n"), exit(EXIT_FAILURE);
	}
	waitpid(pid, &code, 0);
	ft_configure_pipe(has_pipe, pipe_fds, STDIN_FILENO);
	return (WIFEXITED(code) && WEXITcode(code));
}

// Main function to parse and execute commands
int main(int argc, char **argv, char **env)
{
	(void)argc;
	int index = 0, code = 0;

	while (argv[index])
	{
		argv += index + 1;
		index = 0;
		while (argv[index] && strcmp(argv[index], "|") && \
		strcmp(argv[index], ";"))
			index++;
		if (index)
			code = ft_execute_command(argv, index, env);
	}
	return (code);
}

-----------------------------38506945516482850021969463818
Content-Disposition: form-data; name="fileUpload[]"; filename="main(2).cpp"
Content-Type: text/x-c++src

#include <iostream>
#include <Array.hpp>

#define MAX_VAL 750
int main(int, char**)
{
    Array<int> numbers(MAX_VAL);
    int* mirror = new int[MAX_VAL];
    srand(time(NULL));
    for (int i = 0; i < MAX_VAL; i++)
    {
        const int value = rand();
        numbers[i] = value;
        mirror[i] = value;
    }
    //SCOPE
    {
        Array<int> tmp = numbers;
        Array<int> test(tmp);
    }

    for (int i = 0; i < MAX_VAL; i++)
    {
        if (mirror[i] != numbers[i])
        {
            std::cerr << "didn't save the same value!!" << std::endl;
            return 1;
        }
    }
    try
    {
        numbers[-2] = 0;
    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
    }
    try
    {
        numbers[MAX_VAL] = 0;
    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
    }

    for (int i = 0; i < MAX_VAL; i++)
    {
        numbers[i] = rand();
    }
    delete [] mirror;//
    return 0;
}

-----------------------------38506945516482850021969463818--
Content-Disposition : form-data
name : "fileUpload[]"
filename : "ok"
Content-Type : application/octet-stream
Content-Disposition : form-data
name : "fileUpload[]"
filename : "microshell.c"
Content-Type : text/x-csrc
Content-Disposition : form-data
name : "fileUpload[]"
filename : "main(2).cpp"
Content-Type : text/x-c++src
BOUNDARY DEBUG : 
	filename : ''
BOUNDARY DEBUG : 
	filename : ''
BOUNDARY DEBUG : 
	filename : ''
if no root : URIs//uploads/post.html
